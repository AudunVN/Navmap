//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3607
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace FLInfocardIE.Util_Functions {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("GameDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class GameDataSet : global::System.Data.DataSet {
        
        private HashListDataTable tableHashList;
        
        private ShipInfoListDataTable tableShipInfoList;
        
        private EquipInfoListDataTable tableEquipInfoList;
        
        private HardPointListDataTable tableHardPointList;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GameDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected GameDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["HashList"] != null)) {
                    base.Tables.Add(new HashListDataTable(ds.Tables["HashList"]));
                }
                if ((ds.Tables["ShipInfoList"] != null)) {
                    base.Tables.Add(new ShipInfoListDataTable(ds.Tables["ShipInfoList"]));
                }
                if ((ds.Tables["EquipInfoList"] != null)) {
                    base.Tables.Add(new EquipInfoListDataTable(ds.Tables["EquipInfoList"]));
                }
                if ((ds.Tables["HardPointList"] != null)) {
                    base.Tables.Add(new HardPointListDataTable(ds.Tables["HardPointList"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HashListDataTable HashList {
            get {
                return this.tableHashList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ShipInfoListDataTable ShipInfoList {
            get {
                return this.tableShipInfoList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EquipInfoListDataTable EquipInfoList {
            get {
                return this.tableEquipInfoList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HardPointListDataTable HardPointList {
            get {
                return this.tableHardPointList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            GameDataSet cln = ((GameDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["HashList"] != null)) {
                    base.Tables.Add(new HashListDataTable(ds.Tables["HashList"]));
                }
                if ((ds.Tables["ShipInfoList"] != null)) {
                    base.Tables.Add(new ShipInfoListDataTable(ds.Tables["ShipInfoList"]));
                }
                if ((ds.Tables["EquipInfoList"] != null)) {
                    base.Tables.Add(new EquipInfoListDataTable(ds.Tables["EquipInfoList"]));
                }
                if ((ds.Tables["HardPointList"] != null)) {
                    base.Tables.Add(new HardPointListDataTable(ds.Tables["HardPointList"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableHashList = ((HashListDataTable)(base.Tables["HashList"]));
            if ((initTable == true)) {
                if ((this.tableHashList != null)) {
                    this.tableHashList.InitVars();
                }
            }
            this.tableShipInfoList = ((ShipInfoListDataTable)(base.Tables["ShipInfoList"]));
            if ((initTable == true)) {
                if ((this.tableShipInfoList != null)) {
                    this.tableShipInfoList.InitVars();
                }
            }
            this.tableEquipInfoList = ((EquipInfoListDataTable)(base.Tables["EquipInfoList"]));
            if ((initTable == true)) {
                if ((this.tableEquipInfoList != null)) {
                    this.tableEquipInfoList.InitVars();
                }
            }
            this.tableHardPointList = ((HardPointListDataTable)(base.Tables["HardPointList"]));
            if ((initTable == true)) {
                if ((this.tableHardPointList != null)) {
                    this.tableHardPointList.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "GameDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/GameDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableHashList = new HashListDataTable();
            base.Tables.Add(this.tableHashList);
            this.tableShipInfoList = new ShipInfoListDataTable();
            base.Tables.Add(this.tableShipInfoList);
            this.tableEquipInfoList = new EquipInfoListDataTable();
            base.Tables.Add(this.tableEquipInfoList);
            this.tableHardPointList = new HardPointListDataTable();
            base.Tables.Add(this.tableHardPointList);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHashList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeShipInfoList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEquipInfoList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHardPointList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            GameDataSet ds = new GameDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void HashListRowChangeEventHandler(object sender, HashListRowChangeEvent e);
        
        public delegate void ShipInfoListRowChangeEventHandler(object sender, ShipInfoListRowChangeEvent e);
        
        public delegate void EquipInfoListRowChangeEventHandler(object sender, EquipInfoListRowChangeEvent e);
        
        public delegate void HardPointListRowChangeEventHandler(object sender, HardPointListRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HashListDataTable : global::System.Data.TypedTableBase<HashListRow> {
            
            private global::System.Data.DataColumn columnItemHash;
            
            private global::System.Data.DataColumn columnItemNickName;
            
            private global::System.Data.DataColumn columnItemType;
            
            private global::System.Data.DataColumn columnIDSName;
            
            private global::System.Data.DataColumn columnIDSInfo;
            
            private global::System.Data.DataColumn columnIDSInfo1;
            
            private global::System.Data.DataColumn columnIDSInfo2;
            
            private global::System.Data.DataColumn columnIDSInfo3;
            
            private global::System.Data.DataColumn columnKeys;
            
            private global::System.Data.DataColumn columnIDSNameTxt;
            
            private global::System.Data.DataColumn columnIDSInfoTxt;
            
            private global::System.Data.DataColumn columnIDSInfo1Txt;
            
            private global::System.Data.DataColumn columnIDSInfo2Txt;
            
            private global::System.Data.DataColumn columnIDSInfo3Txt;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HashListDataTable() {
                this.TableName = "HashList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HashListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HashListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemHashColumn {
                get {
                    return this.columnItemHash;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemNickNameColumn {
                get {
                    return this.columnItemNickName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemTypeColumn {
                get {
                    return this.columnItemType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDSNameColumn {
                get {
                    return this.columnIDSName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDSInfoColumn {
                get {
                    return this.columnIDSInfo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDSInfo1Column {
                get {
                    return this.columnIDSInfo1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDSInfo2Column {
                get {
                    return this.columnIDSInfo2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDSInfo3Column {
                get {
                    return this.columnIDSInfo3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeysColumn {
                get {
                    return this.columnKeys;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDSNameTxtColumn {
                get {
                    return this.columnIDSNameTxt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDSInfoTxtColumn {
                get {
                    return this.columnIDSInfoTxt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDSInfo1TxtColumn {
                get {
                    return this.columnIDSInfo1Txt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDSInfo2TxtColumn {
                get {
                    return this.columnIDSInfo2Txt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDSInfo3TxtColumn {
                get {
                    return this.columnIDSInfo3Txt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HashListRow this[int index] {
                get {
                    return ((HashListRow)(this.Rows[index]));
                }
            }
            
            public event HashListRowChangeEventHandler HashListRowChanging;
            
            public event HashListRowChangeEventHandler HashListRowChanged;
            
            public event HashListRowChangeEventHandler HashListRowDeleting;
            
            public event HashListRowChangeEventHandler HashListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHashListRow(HashListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HashListRow AddHashListRow(long ItemHash, string ItemNickName, string ItemType, uint IDSName, uint IDSInfo, uint IDSInfo1, uint IDSInfo2, uint IDSInfo3, string Keys, string IDSNameTxt, string IDSInfoTxt, string IDSInfo1Txt, string IDSInfo2Txt, string IDSInfo3Txt) {
                HashListRow rowHashListRow = ((HashListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ItemHash,
                        ItemNickName,
                        ItemType,
                        IDSName,
                        IDSInfo,
                        IDSInfo1,
                        IDSInfo2,
                        IDSInfo3,
                        Keys,
                        IDSNameTxt,
                        IDSInfoTxt,
                        IDSInfo1Txt,
                        IDSInfo2Txt,
                        IDSInfo3Txt};
                rowHashListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHashListRow);
                return rowHashListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HashListRow FindByItemHash(long ItemHash) {
                return ((HashListRow)(this.Rows.Find(new object[] {
                            ItemHash})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HashListDataTable cln = ((HashListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HashListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnItemHash = base.Columns["ItemHash"];
                this.columnItemNickName = base.Columns["ItemNickName"];
                this.columnItemType = base.Columns["ItemType"];
                this.columnIDSName = base.Columns["IDSName"];
                this.columnIDSInfo = base.Columns["IDSInfo"];
                this.columnIDSInfo1 = base.Columns["IDSInfo1"];
                this.columnIDSInfo2 = base.Columns["IDSInfo2"];
                this.columnIDSInfo3 = base.Columns["IDSInfo3"];
                this.columnKeys = base.Columns["Keys"];
                this.columnIDSNameTxt = base.Columns["IDSNameTxt"];
                this.columnIDSInfoTxt = base.Columns["IDSInfoTxt"];
                this.columnIDSInfo1Txt = base.Columns["IDSInfo1Txt"];
                this.columnIDSInfo2Txt = base.Columns["IDSInfo2Txt"];
                this.columnIDSInfo3Txt = base.Columns["IDSInfo3Txt"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnItemHash = new global::System.Data.DataColumn("ItemHash", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemHash);
                this.columnItemNickName = new global::System.Data.DataColumn("ItemNickName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemNickName);
                this.columnItemType = new global::System.Data.DataColumn("ItemType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemType);
                this.columnIDSName = new global::System.Data.DataColumn("IDSName", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDSName);
                this.columnIDSInfo = new global::System.Data.DataColumn("IDSInfo", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDSInfo);
                this.columnIDSInfo1 = new global::System.Data.DataColumn("IDSInfo1", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDSInfo1);
                this.columnIDSInfo2 = new global::System.Data.DataColumn("IDSInfo2", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDSInfo2);
                this.columnIDSInfo3 = new global::System.Data.DataColumn("IDSInfo3", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDSInfo3);
                this.columnKeys = new global::System.Data.DataColumn("Keys", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeys);
                this.columnIDSNameTxt = new global::System.Data.DataColumn("IDSNameTxt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDSNameTxt);
                this.columnIDSInfoTxt = new global::System.Data.DataColumn("IDSInfoTxt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDSInfoTxt);
                this.columnIDSInfo1Txt = new global::System.Data.DataColumn("IDSInfo1Txt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDSInfo1Txt);
                this.columnIDSInfo2Txt = new global::System.Data.DataColumn("IDSInfo2Txt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDSInfo2Txt);
                this.columnIDSInfo3Txt = new global::System.Data.DataColumn("IDSInfo3Txt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDSInfo3Txt);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("HashListKey1", new global::System.Data.DataColumn[] {
                                this.columnItemHash}, true));
                this.columnItemHash.AllowDBNull = false;
                this.columnItemHash.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HashListRow NewHashListRow() {
                return ((HashListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HashListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HashListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HashListRowChanged != null)) {
                    this.HashListRowChanged(this, new HashListRowChangeEvent(((HashListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HashListRowChanging != null)) {
                    this.HashListRowChanging(this, new HashListRowChangeEvent(((HashListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HashListRowDeleted != null)) {
                    this.HashListRowDeleted(this, new HashListRowChangeEvent(((HashListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HashListRowDeleting != null)) {
                    this.HashListRowDeleting(this, new HashListRowChangeEvent(((HashListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHashListRow(HashListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GameDataSet ds = new GameDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HashListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ShipInfoListDataTable : global::System.Data.TypedTableBase<ShipInfoListRow> {
            
            private global::System.Data.DataColumn columnShipHash;
            
            private global::System.Data.DataColumn columnDefaultEngine;
            
            private global::System.Data.DataColumn columnDefaultSound;
            
            private global::System.Data.DataColumn columnDefaultPowerPlant;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ShipInfoListDataTable() {
                this.TableName = "ShipInfoList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ShipInfoListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ShipInfoListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShipHashColumn {
                get {
                    return this.columnShipHash;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DefaultEngineColumn {
                get {
                    return this.columnDefaultEngine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DefaultSoundColumn {
                get {
                    return this.columnDefaultSound;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DefaultPowerPlantColumn {
                get {
                    return this.columnDefaultPowerPlant;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ShipInfoListRow this[int index] {
                get {
                    return ((ShipInfoListRow)(this.Rows[index]));
                }
            }
            
            public event ShipInfoListRowChangeEventHandler ShipInfoListRowChanging;
            
            public event ShipInfoListRowChangeEventHandler ShipInfoListRowChanged;
            
            public event ShipInfoListRowChangeEventHandler ShipInfoListRowDeleting;
            
            public event ShipInfoListRowChangeEventHandler ShipInfoListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddShipInfoListRow(ShipInfoListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ShipInfoListRow AddShipInfoListRow(long ShipHash, long DefaultEngine, long DefaultSound, long DefaultPowerPlant) {
                ShipInfoListRow rowShipInfoListRow = ((ShipInfoListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ShipHash,
                        DefaultEngine,
                        DefaultSound,
                        DefaultPowerPlant};
                rowShipInfoListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowShipInfoListRow);
                return rowShipInfoListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ShipInfoListRow FindByShipHash(long ShipHash) {
                return ((ShipInfoListRow)(this.Rows.Find(new object[] {
                            ShipHash})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ShipInfoListDataTable cln = ((ShipInfoListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ShipInfoListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnShipHash = base.Columns["ShipHash"];
                this.columnDefaultEngine = base.Columns["DefaultEngine"];
                this.columnDefaultSound = base.Columns["DefaultSound"];
                this.columnDefaultPowerPlant = base.Columns["DefaultPowerPlant"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnShipHash = new global::System.Data.DataColumn("ShipHash", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShipHash);
                this.columnDefaultEngine = new global::System.Data.DataColumn("DefaultEngine", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefaultEngine);
                this.columnDefaultSound = new global::System.Data.DataColumn("DefaultSound", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefaultSound);
                this.columnDefaultPowerPlant = new global::System.Data.DataColumn("DefaultPowerPlant", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefaultPowerPlant);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnShipHash}, true));
                this.columnShipHash.AllowDBNull = false;
                this.columnShipHash.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ShipInfoListRow NewShipInfoListRow() {
                return ((ShipInfoListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ShipInfoListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ShipInfoListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ShipInfoListRowChanged != null)) {
                    this.ShipInfoListRowChanged(this, new ShipInfoListRowChangeEvent(((ShipInfoListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ShipInfoListRowChanging != null)) {
                    this.ShipInfoListRowChanging(this, new ShipInfoListRowChangeEvent(((ShipInfoListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ShipInfoListRowDeleted != null)) {
                    this.ShipInfoListRowDeleted(this, new ShipInfoListRowChangeEvent(((ShipInfoListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ShipInfoListRowDeleting != null)) {
                    this.ShipInfoListRowDeleting(this, new ShipInfoListRowChangeEvent(((ShipInfoListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveShipInfoListRow(ShipInfoListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GameDataSet ds = new GameDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ShipInfoListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EquipInfoListDataTable : global::System.Data.TypedTableBase<EquipInfoListRow> {
            
            private global::System.Data.DataColumn columnEquipHash;
            
            private global::System.Data.DataColumn columnItemType;
            
            private global::System.Data.DataColumn columnHpType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EquipInfoListDataTable() {
                this.TableName = "EquipInfoList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EquipInfoListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EquipInfoListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EquipHashColumn {
                get {
                    return this.columnEquipHash;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemTypeColumn {
                get {
                    return this.columnItemType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HpTypeColumn {
                get {
                    return this.columnHpType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EquipInfoListRow this[int index] {
                get {
                    return ((EquipInfoListRow)(this.Rows[index]));
                }
            }
            
            public event EquipInfoListRowChangeEventHandler EquipInfoListRowChanging;
            
            public event EquipInfoListRowChangeEventHandler EquipInfoListRowChanged;
            
            public event EquipInfoListRowChangeEventHandler EquipInfoListRowDeleting;
            
            public event EquipInfoListRowChangeEventHandler EquipInfoListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEquipInfoListRow(EquipInfoListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EquipInfoListRow AddEquipInfoListRow(long EquipHash, string ItemType, string HpType) {
                EquipInfoListRow rowEquipInfoListRow = ((EquipInfoListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EquipHash,
                        ItemType,
                        HpType};
                rowEquipInfoListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEquipInfoListRow);
                return rowEquipInfoListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EquipInfoListRow FindByEquipHash(long EquipHash) {
                return ((EquipInfoListRow)(this.Rows.Find(new object[] {
                            EquipHash})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EquipInfoListDataTable cln = ((EquipInfoListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EquipInfoListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEquipHash = base.Columns["EquipHash"];
                this.columnItemType = base.Columns["ItemType"];
                this.columnHpType = base.Columns["HpType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEquipHash = new global::System.Data.DataColumn("EquipHash", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEquipHash);
                this.columnItemType = new global::System.Data.DataColumn("ItemType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemType);
                this.columnHpType = new global::System.Data.DataColumn("HpType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHpType);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEquipHash}, true));
                this.columnEquipHash.AllowDBNull = false;
                this.columnEquipHash.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EquipInfoListRow NewEquipInfoListRow() {
                return ((EquipInfoListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EquipInfoListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EquipInfoListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EquipInfoListRowChanged != null)) {
                    this.EquipInfoListRowChanged(this, new EquipInfoListRowChangeEvent(((EquipInfoListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EquipInfoListRowChanging != null)) {
                    this.EquipInfoListRowChanging(this, new EquipInfoListRowChangeEvent(((EquipInfoListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EquipInfoListRowDeleted != null)) {
                    this.EquipInfoListRowDeleted(this, new EquipInfoListRowChangeEvent(((EquipInfoListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EquipInfoListRowDeleting != null)) {
                    this.EquipInfoListRowDeleting(this, new EquipInfoListRowChangeEvent(((EquipInfoListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEquipInfoListRow(EquipInfoListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GameDataSet ds = new GameDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EquipInfoListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HardPointListDataTable : global::System.Data.TypedTableBase<HardPointListRow> {
            
            private global::System.Data.DataColumn columnShipHash;
            
            private global::System.Data.DataColumn columnHPName;
            
            private global::System.Data.DataColumn columnItemType;
            
            private global::System.Data.DataColumn columnMountableTypes;
            
            private global::System.Data.DataColumn columnItemHash;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HardPointListDataTable() {
                this.TableName = "HardPointList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HardPointListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HardPointListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShipHashColumn {
                get {
                    return this.columnShipHash;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HPNameColumn {
                get {
                    return this.columnHPName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemTypeColumn {
                get {
                    return this.columnItemType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MountableTypesColumn {
                get {
                    return this.columnMountableTypes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemHashColumn {
                get {
                    return this.columnItemHash;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HardPointListRow this[int index] {
                get {
                    return ((HardPointListRow)(this.Rows[index]));
                }
            }
            
            public event HardPointListRowChangeEventHandler HardPointListRowChanging;
            
            public event HardPointListRowChangeEventHandler HardPointListRowChanged;
            
            public event HardPointListRowChangeEventHandler HardPointListRowDeleting;
            
            public event HardPointListRowChangeEventHandler HardPointListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHardPointListRow(HardPointListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HardPointListRow AddHardPointListRow(long ShipHash, string HPName, string ItemType, string MountableTypes, long ItemHash) {
                HardPointListRow rowHardPointListRow = ((HardPointListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ShipHash,
                        HPName,
                        ItemType,
                        MountableTypes,
                        ItemHash};
                rowHardPointListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHardPointListRow);
                return rowHardPointListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HardPointListDataTable cln = ((HardPointListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HardPointListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnShipHash = base.Columns["ShipHash"];
                this.columnHPName = base.Columns["HPName"];
                this.columnItemType = base.Columns["ItemType"];
                this.columnMountableTypes = base.Columns["MountableTypes"];
                this.columnItemHash = base.Columns["ItemHash"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnShipHash = new global::System.Data.DataColumn("ShipHash", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShipHash);
                this.columnHPName = new global::System.Data.DataColumn("HPName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHPName);
                this.columnItemType = new global::System.Data.DataColumn("ItemType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemType);
                this.columnMountableTypes = new global::System.Data.DataColumn("MountableTypes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMountableTypes);
                this.columnItemHash = new global::System.Data.DataColumn("ItemHash", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemHash);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HardPointListRow NewHardPointListRow() {
                return ((HardPointListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HardPointListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HardPointListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HardPointListRowChanged != null)) {
                    this.HardPointListRowChanged(this, new HardPointListRowChangeEvent(((HardPointListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HardPointListRowChanging != null)) {
                    this.HardPointListRowChanging(this, new HardPointListRowChangeEvent(((HardPointListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HardPointListRowDeleted != null)) {
                    this.HardPointListRowDeleted(this, new HardPointListRowChangeEvent(((HardPointListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HardPointListRowDeleting != null)) {
                    this.HardPointListRowDeleting(this, new HardPointListRowChangeEvent(((HardPointListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHardPointListRow(HardPointListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GameDataSet ds = new GameDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HardPointListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HashListRow : global::System.Data.DataRow {
            
            private HashListDataTable tableHashList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HashListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHashList = ((HashListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ItemHash {
                get {
                    return ((long)(this[this.tableHashList.ItemHashColumn]));
                }
                set {
                    this[this.tableHashList.ItemHashColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemNickName {
                get {
                    try {
                        return ((string)(this[this.tableHashList.ItemNickNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemNickName\' in table \'HashList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHashList.ItemNickNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemType {
                get {
                    try {
                        return ((string)(this[this.tableHashList.ItemTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemType\' in table \'HashList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHashList.ItemTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint IDSName {
                get {
                    try {
                        return ((uint)(this[this.tableHashList.IDSNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDSName\' in table \'HashList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHashList.IDSNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint IDSInfo {
                get {
                    try {
                        return ((uint)(this[this.tableHashList.IDSInfoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDSInfo\' in table \'HashList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHashList.IDSInfoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint IDSInfo1 {
                get {
                    try {
                        return ((uint)(this[this.tableHashList.IDSInfo1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDSInfo1\' in table \'HashList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHashList.IDSInfo1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint IDSInfo2 {
                get {
                    try {
                        return ((uint)(this[this.tableHashList.IDSInfo2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDSInfo2\' in table \'HashList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHashList.IDSInfo2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint IDSInfo3 {
                get {
                    try {
                        return ((uint)(this[this.tableHashList.IDSInfo3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDSInfo3\' in table \'HashList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHashList.IDSInfo3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Keys {
                get {
                    try {
                        return ((string)(this[this.tableHashList.KeysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Keys\' in table \'HashList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHashList.KeysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDSNameTxt {
                get {
                    try {
                        return ((string)(this[this.tableHashList.IDSNameTxtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDSNameTxt\' in table \'HashList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHashList.IDSNameTxtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDSInfoTxt {
                get {
                    try {
                        return ((string)(this[this.tableHashList.IDSInfoTxtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDSInfoTxt\' in table \'HashList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHashList.IDSInfoTxtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDSInfo1Txt {
                get {
                    try {
                        return ((string)(this[this.tableHashList.IDSInfo1TxtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDSInfo1Txt\' in table \'HashList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHashList.IDSInfo1TxtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDSInfo2Txt {
                get {
                    try {
                        return ((string)(this[this.tableHashList.IDSInfo2TxtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDSInfo2Txt\' in table \'HashList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHashList.IDSInfo2TxtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDSInfo3Txt {
                get {
                    try {
                        return ((string)(this[this.tableHashList.IDSInfo3TxtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDSInfo3Txt\' in table \'HashList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHashList.IDSInfo3TxtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemNickNameNull() {
                return this.IsNull(this.tableHashList.ItemNickNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemNickNameNull() {
                this[this.tableHashList.ItemNickNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemTypeNull() {
                return this.IsNull(this.tableHashList.ItemTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemTypeNull() {
                this[this.tableHashList.ItemTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDSNameNull() {
                return this.IsNull(this.tableHashList.IDSNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDSNameNull() {
                this[this.tableHashList.IDSNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDSInfoNull() {
                return this.IsNull(this.tableHashList.IDSInfoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDSInfoNull() {
                this[this.tableHashList.IDSInfoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDSInfo1Null() {
                return this.IsNull(this.tableHashList.IDSInfo1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDSInfo1Null() {
                this[this.tableHashList.IDSInfo1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDSInfo2Null() {
                return this.IsNull(this.tableHashList.IDSInfo2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDSInfo2Null() {
                this[this.tableHashList.IDSInfo2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDSInfo3Null() {
                return this.IsNull(this.tableHashList.IDSInfo3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDSInfo3Null() {
                this[this.tableHashList.IDSInfo3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeysNull() {
                return this.IsNull(this.tableHashList.KeysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeysNull() {
                this[this.tableHashList.KeysColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDSNameTxtNull() {
                return this.IsNull(this.tableHashList.IDSNameTxtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDSNameTxtNull() {
                this[this.tableHashList.IDSNameTxtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDSInfoTxtNull() {
                return this.IsNull(this.tableHashList.IDSInfoTxtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDSInfoTxtNull() {
                this[this.tableHashList.IDSInfoTxtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDSInfo1TxtNull() {
                return this.IsNull(this.tableHashList.IDSInfo1TxtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDSInfo1TxtNull() {
                this[this.tableHashList.IDSInfo1TxtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDSInfo2TxtNull() {
                return this.IsNull(this.tableHashList.IDSInfo2TxtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDSInfo2TxtNull() {
                this[this.tableHashList.IDSInfo2TxtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDSInfo3TxtNull() {
                return this.IsNull(this.tableHashList.IDSInfo3TxtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDSInfo3TxtNull() {
                this[this.tableHashList.IDSInfo3TxtColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ShipInfoListRow : global::System.Data.DataRow {
            
            private ShipInfoListDataTable tableShipInfoList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ShipInfoListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableShipInfoList = ((ShipInfoListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ShipHash {
                get {
                    return ((long)(this[this.tableShipInfoList.ShipHashColumn]));
                }
                set {
                    this[this.tableShipInfoList.ShipHashColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long DefaultEngine {
                get {
                    try {
                        return ((long)(this[this.tableShipInfoList.DefaultEngineColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DefaultEngine\' in table \'ShipInfoList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShipInfoList.DefaultEngineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long DefaultSound {
                get {
                    try {
                        return ((long)(this[this.tableShipInfoList.DefaultSoundColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DefaultSound\' in table \'ShipInfoList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShipInfoList.DefaultSoundColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long DefaultPowerPlant {
                get {
                    try {
                        return ((long)(this[this.tableShipInfoList.DefaultPowerPlantColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DefaultPowerPlant\' in table \'ShipInfoList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShipInfoList.DefaultPowerPlantColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDefaultEngineNull() {
                return this.IsNull(this.tableShipInfoList.DefaultEngineColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDefaultEngineNull() {
                this[this.tableShipInfoList.DefaultEngineColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDefaultSoundNull() {
                return this.IsNull(this.tableShipInfoList.DefaultSoundColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDefaultSoundNull() {
                this[this.tableShipInfoList.DefaultSoundColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDefaultPowerPlantNull() {
                return this.IsNull(this.tableShipInfoList.DefaultPowerPlantColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDefaultPowerPlantNull() {
                this[this.tableShipInfoList.DefaultPowerPlantColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EquipInfoListRow : global::System.Data.DataRow {
            
            private EquipInfoListDataTable tableEquipInfoList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EquipInfoListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEquipInfoList = ((EquipInfoListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long EquipHash {
                get {
                    return ((long)(this[this.tableEquipInfoList.EquipHashColumn]));
                }
                set {
                    this[this.tableEquipInfoList.EquipHashColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemType {
                get {
                    try {
                        return ((string)(this[this.tableEquipInfoList.ItemTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemType\' in table \'EquipInfoList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEquipInfoList.ItemTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HpType {
                get {
                    try {
                        return ((string)(this[this.tableEquipInfoList.HpTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HpType\' in table \'EquipInfoList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEquipInfoList.HpTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemTypeNull() {
                return this.IsNull(this.tableEquipInfoList.ItemTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemTypeNull() {
                this[this.tableEquipInfoList.ItemTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHpTypeNull() {
                return this.IsNull(this.tableEquipInfoList.HpTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHpTypeNull() {
                this[this.tableEquipInfoList.HpTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HardPointListRow : global::System.Data.DataRow {
            
            private HardPointListDataTable tableHardPointList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HardPointListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHardPointList = ((HardPointListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ShipHash {
                get {
                    try {
                        return ((long)(this[this.tableHardPointList.ShipHashColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShipHash\' in table \'HardPointList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHardPointList.ShipHashColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HPName {
                get {
                    try {
                        return ((string)(this[this.tableHardPointList.HPNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HPName\' in table \'HardPointList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHardPointList.HPNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemType {
                get {
                    try {
                        return ((string)(this[this.tableHardPointList.ItemTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemType\' in table \'HardPointList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHardPointList.ItemTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MountableTypes {
                get {
                    try {
                        return ((string)(this[this.tableHardPointList.MountableTypesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MountableTypes\' in table \'HardPointList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHardPointList.MountableTypesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ItemHash {
                get {
                    try {
                        return ((long)(this[this.tableHardPointList.ItemHashColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemHash\' in table \'HardPointList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHardPointList.ItemHashColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShipHashNull() {
                return this.IsNull(this.tableHardPointList.ShipHashColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShipHashNull() {
                this[this.tableHardPointList.ShipHashColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHPNameNull() {
                return this.IsNull(this.tableHardPointList.HPNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHPNameNull() {
                this[this.tableHardPointList.HPNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemTypeNull() {
                return this.IsNull(this.tableHardPointList.ItemTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemTypeNull() {
                this[this.tableHardPointList.ItemTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMountableTypesNull() {
                return this.IsNull(this.tableHardPointList.MountableTypesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMountableTypesNull() {
                this[this.tableHardPointList.MountableTypesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemHashNull() {
                return this.IsNull(this.tableHardPointList.ItemHashColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemHashNull() {
                this[this.tableHardPointList.ItemHashColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HashListRowChangeEvent : global::System.EventArgs {
            
            private HashListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HashListRowChangeEvent(HashListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HashListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ShipInfoListRowChangeEvent : global::System.EventArgs {
            
            private ShipInfoListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ShipInfoListRowChangeEvent(ShipInfoListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ShipInfoListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EquipInfoListRowChangeEvent : global::System.EventArgs {
            
            private EquipInfoListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EquipInfoListRowChangeEvent(EquipInfoListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EquipInfoListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HardPointListRowChangeEvent : global::System.EventArgs {
            
            private HardPointListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HardPointListRowChangeEvent(HardPointListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HardPointListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591